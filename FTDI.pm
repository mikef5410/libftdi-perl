# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package FTDI;
use base qw(Exporter);
use base qw(DynaLoader);
package FTDIc;
bootstrap FTDI;
package FTDI;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package FTDI;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package FTDI;

*usb_find_all = *FTDIc::usb_find_all;
*usb_get_strings = *FTDIc::usb_get_strings;
*read_data = *FTDIc::read_data;
*read_data_get_chunksize = *FTDIc::read_data_get_chunksize;
*write_data_get_chunksize = *FTDIc::write_data_get_chunksize;
*read_pins = *FTDIc::read_pins;
*get_latency_timer = *FTDIc::get_latency_timer;
*poll_modem_status = *FTDIc::poll_modem_status;
*get_eeprom_value = *FTDIc::get_eeprom_value;
*get_eeprom_buf = *FTDIc::get_eeprom_buf;
*read_eeprom_location = *FTDIc::read_eeprom_location;
*read_chipid = *FTDIc::read_chipid;
*init = *FTDIc::init;
*new = *FTDIc::new;
*set_interface = *FTDIc::set_interface;
*deinit = *FTDIc::deinit;
*free = *FTDIc::free;
*set_usbdev = *FTDIc::set_usbdev;
*get_library_version = *FTDIc::get_library_version;
*list_free = *FTDIc::list_free;
*list_free2 = *FTDIc::list_free2;
*usb_get_strings2 = *FTDIc::usb_get_strings2;
*eeprom_get_strings = *FTDIc::eeprom_get_strings;
*eeprom_set_strings = *FTDIc::eeprom_set_strings;
*usb_open = *FTDIc::usb_open;
*usb_open_desc = *FTDIc::usb_open_desc;
*usb_open_desc_index = *FTDIc::usb_open_desc_index;
*usb_open_bus_addr = *FTDIc::usb_open_bus_addr;
*usb_open_dev = *FTDIc::usb_open_dev;
*usb_open_string = *FTDIc::usb_open_string;
*usb_close = *FTDIc::usb_close;
*usb_reset = *FTDIc::usb_reset;
*usb_purge_rx_buffer = *FTDIc::usb_purge_rx_buffer;
*usb_purge_tx_buffer = *FTDIc::usb_purge_tx_buffer;
*usb_purge_buffers = *FTDIc::usb_purge_buffers;
*set_baudrate = *FTDIc::set_baudrate;
*set_line_property = *FTDIc::set_line_property;
*set_line_property2 = *FTDIc::set_line_property2;
*read_data_set_chunksize = *FTDIc::read_data_set_chunksize;
*write_data = *FTDIc::write_data;
*write_data_set_chunksize = *FTDIc::write_data_set_chunksize;
*readstream = *FTDIc::readstream;
*write_data_submit = *FTDIc::write_data_submit;
*read_data_submit = *FTDIc::read_data_submit;
*transfer_data_done = *FTDIc::transfer_data_done;
*transfer_data_cancel = *FTDIc::transfer_data_cancel;
*set_bitmode = *FTDIc::set_bitmode;
*disable_bitbang = *FTDIc::disable_bitbang;
*set_latency_timer = *FTDIc::set_latency_timer;
*setflowctrl = *FTDIc::setflowctrl;
*setdtr_rts = *FTDIc::setdtr_rts;
*setdtr = *FTDIc::setdtr;
*setrts = *FTDIc::setrts;
*set_event_char = *FTDIc::set_event_char;
*set_error_char = *FTDIc::set_error_char;
*eeprom_initdefaults = *FTDIc::eeprom_initdefaults;
*eeprom_build = *FTDIc::eeprom_build;
*eeprom_decode = *FTDIc::eeprom_decode;
*set_eeprom_value = *FTDIc::set_eeprom_value;
*set_eeprom_buf = *FTDIc::set_eeprom_buf;
*set_eeprom_user_data = *FTDIc::set_eeprom_user_data;
*read_eeprom = *FTDIc::read_eeprom;
*write_eeprom = *FTDIc::write_eeprom;
*erase_eeprom = *FTDIc::erase_eeprom;
*write_eeprom_location = *FTDIc::write_eeprom_location;
*get_error_string = *FTDIc::get_error_string;

############# Class : FTDI::transfer_control ##############

package FTDI::transfer_control;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FTDI );
%OWNER = ();
%ITERATORS = ();
*swig_completed_get = *FTDIc::transfer_control_completed_get;
*swig_completed_set = *FTDIc::transfer_control_completed_set;
*swig_buf_get = *FTDIc::transfer_control_buf_get;
*swig_buf_set = *FTDIc::transfer_control_buf_set;
*swig_size_get = *FTDIc::transfer_control_size_get;
*swig_size_set = *FTDIc::transfer_control_size_set;
*swig_offset_get = *FTDIc::transfer_control_offset_get;
*swig_offset_set = *FTDIc::transfer_control_offset_set;
*swig_ftdi_get = *FTDIc::transfer_control_ftdi_get;
*swig_ftdi_set = *FTDIc::transfer_control_ftdi_set;
*swig_transfer_get = *FTDIc::transfer_control_transfer_get;
*swig_transfer_set = *FTDIc::transfer_control_transfer_set;
sub new {
    my $pkg = shift;
    my $self = FTDIc::new_transfer_control(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FTDIc::delete_transfer_control($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FTDI::context ##############

package FTDI::context;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FTDI );
%OWNER = ();
%ITERATORS = ();
*swig_usb_ctx_get = *FTDIc::context_usb_ctx_get;
*swig_usb_ctx_set = *FTDIc::context_usb_ctx_set;
*swig_usb_dev_get = *FTDIc::context_usb_dev_get;
*swig_usb_dev_set = *FTDIc::context_usb_dev_set;
*swig_usb_read_timeout_get = *FTDIc::context_usb_read_timeout_get;
*swig_usb_read_timeout_set = *FTDIc::context_usb_read_timeout_set;
*swig_usb_write_timeout_get = *FTDIc::context_usb_write_timeout_get;
*swig_usb_write_timeout_set = *FTDIc::context_usb_write_timeout_set;
*swig_type_get = *FTDIc::context_type_get;
*swig_type_set = *FTDIc::context_type_set;
*swig_baudrate_get = *FTDIc::context_baudrate_get;
*swig_baudrate_set = *FTDIc::context_baudrate_set;
*swig_bitbang_enabled_get = *FTDIc::context_bitbang_enabled_get;
*swig_bitbang_enabled_set = *FTDIc::context_bitbang_enabled_set;
*swig_readbuffer_get = *FTDIc::context_readbuffer_get;
*swig_readbuffer_set = *FTDIc::context_readbuffer_set;
*swig_readbuffer_offset_get = *FTDIc::context_readbuffer_offset_get;
*swig_readbuffer_offset_set = *FTDIc::context_readbuffer_offset_set;
*swig_readbuffer_remaining_get = *FTDIc::context_readbuffer_remaining_get;
*swig_readbuffer_remaining_set = *FTDIc::context_readbuffer_remaining_set;
*swig_readbuffer_chunksize_get = *FTDIc::context_readbuffer_chunksize_get;
*swig_readbuffer_chunksize_set = *FTDIc::context_readbuffer_chunksize_set;
*swig_writebuffer_chunksize_get = *FTDIc::context_writebuffer_chunksize_get;
*swig_writebuffer_chunksize_set = *FTDIc::context_writebuffer_chunksize_set;
*swig_max_packet_size_get = *FTDIc::context_max_packet_size_get;
*swig_max_packet_size_set = *FTDIc::context_max_packet_size_set;
*swig_interface_get = *FTDIc::context_interface_get;
*swig_interface_set = *FTDIc::context_interface_set;
*swig_index_get = *FTDIc::context_index_get;
*swig_index_set = *FTDIc::context_index_set;
*swig_in_ep_get = *FTDIc::context_in_ep_get;
*swig_in_ep_set = *FTDIc::context_in_ep_set;
*swig_out_ep_get = *FTDIc::context_out_ep_get;
*swig_out_ep_set = *FTDIc::context_out_ep_set;
*swig_bitbang_mode_get = *FTDIc::context_bitbang_mode_get;
*swig_bitbang_mode_set = *FTDIc::context_bitbang_mode_set;
*swig_eeprom_get = *FTDIc::context_eeprom_get;
*swig_eeprom_set = *FTDIc::context_eeprom_set;
*swig_error_str_get = *FTDIc::context_error_str_get;
*swig_error_str_set = *FTDIc::context_error_str_set;
*swig_module_detach_mode_get = *FTDIc::context_module_detach_mode_get;
*swig_module_detach_mode_set = *FTDIc::context_module_detach_mode_set;
sub new {
    my $pkg = shift;
    my $self = FTDIc::new_context(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FTDIc::delete_context($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FTDI::device_list ##############

package FTDI::device_list;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FTDI );
%OWNER = ();
%ITERATORS = ();
*swig_next_get = *FTDIc::device_list_next_get;
*swig_next_set = *FTDIc::device_list_next_set;
*swig_dev_get = *FTDIc::device_list_dev_get;
*swig_dev_set = *FTDIc::device_list_dev_set;
sub new {
    my $pkg = shift;
    my $self = FTDIc::new_device_list(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FTDIc::delete_device_list($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FTDI::size_and_time ##############

package FTDI::size_and_time;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FTDI );
%OWNER = ();
%ITERATORS = ();
*swig_totalBytes_get = *FTDIc::size_and_time_totalBytes_get;
*swig_totalBytes_set = *FTDIc::size_and_time_totalBytes_set;
*swig_time_get = *FTDIc::size_and_time_time_get;
*swig_time_set = *FTDIc::size_and_time_time_set;
sub new {
    my $pkg = shift;
    my $self = FTDIc::new_size_and_time(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FTDIc::delete_size_and_time($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FTDI::FTDIProgressInfo ##############

package FTDI::FTDIProgressInfo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FTDI );
%OWNER = ();
%ITERATORS = ();
*swig_first_get = *FTDIc::FTDIProgressInfo_first_get;
*swig_first_set = *FTDIc::FTDIProgressInfo_first_set;
*swig_prev_get = *FTDIc::FTDIProgressInfo_prev_get;
*swig_prev_set = *FTDIc::FTDIProgressInfo_prev_set;
*swig_current_get = *FTDIc::FTDIProgressInfo_current_get;
*swig_current_set = *FTDIc::FTDIProgressInfo_current_set;
*swig_totalTime_get = *FTDIc::FTDIProgressInfo_totalTime_get;
*swig_totalTime_set = *FTDIc::FTDIProgressInfo_totalTime_set;
*swig_totalRate_get = *FTDIc::FTDIProgressInfo_totalRate_get;
*swig_totalRate_set = *FTDIc::FTDIProgressInfo_totalRate_set;
*swig_currentRate_get = *FTDIc::FTDIProgressInfo_currentRate_get;
*swig_currentRate_set = *FTDIc::FTDIProgressInfo_currentRate_set;
sub new {
    my $pkg = shift;
    my $self = FTDIc::new_FTDIProgressInfo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FTDIc::delete_FTDIProgressInfo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FTDI::version_info ##############

package FTDI::version_info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FTDI );
%OWNER = ();
%ITERATORS = ();
*swig_major_get = *FTDIc::version_info_major_get;
*swig_major_set = *FTDIc::version_info_major_set;
*swig_minor_get = *FTDIc::version_info_minor_get;
*swig_minor_set = *FTDIc::version_info_minor_set;
*swig_micro_get = *FTDIc::version_info_micro_get;
*swig_micro_set = *FTDIc::version_info_micro_set;
*swig_version_str_get = *FTDIc::version_info_version_str_get;
*swig_version_str_set = *FTDIc::version_info_version_str_set;
*swig_snapshot_str_get = *FTDIc::version_info_snapshot_str_get;
*swig_snapshot_str_set = *FTDIc::version_info_snapshot_str_set;
sub new {
    my $pkg = shift;
    my $self = FTDIc::new_version_info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FTDIc::delete_version_info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : FTDI::eeprom ##############

package FTDI::eeprom;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( FTDI );
%OWNER = ();
%ITERATORS = ();
*swig_vendor_id_get = *FTDIc::eeprom_vendor_id_get;
*swig_vendor_id_set = *FTDIc::eeprom_vendor_id_set;
*swig_product_id_get = *FTDIc::eeprom_product_id_get;
*swig_product_id_set = *FTDIc::eeprom_product_id_set;
*swig_initialized_for_connected_device_get = *FTDIc::eeprom_initialized_for_connected_device_get;
*swig_initialized_for_connected_device_set = *FTDIc::eeprom_initialized_for_connected_device_set;
*swig_self_powered_get = *FTDIc::eeprom_self_powered_get;
*swig_self_powered_set = *FTDIc::eeprom_self_powered_set;
*swig_remote_wakeup_get = *FTDIc::eeprom_remote_wakeup_get;
*swig_remote_wakeup_set = *FTDIc::eeprom_remote_wakeup_set;
*swig_is_not_pnp_get = *FTDIc::eeprom_is_not_pnp_get;
*swig_is_not_pnp_set = *FTDIc::eeprom_is_not_pnp_set;
*swig_suspend_dbus7_get = *FTDIc::eeprom_suspend_dbus7_get;
*swig_suspend_dbus7_set = *FTDIc::eeprom_suspend_dbus7_set;
*swig_in_is_isochronous_get = *FTDIc::eeprom_in_is_isochronous_get;
*swig_in_is_isochronous_set = *FTDIc::eeprom_in_is_isochronous_set;
*swig_out_is_isochronous_get = *FTDIc::eeprom_out_is_isochronous_get;
*swig_out_is_isochronous_set = *FTDIc::eeprom_out_is_isochronous_set;
*swig_suspend_pull_downs_get = *FTDIc::eeprom_suspend_pull_downs_get;
*swig_suspend_pull_downs_set = *FTDIc::eeprom_suspend_pull_downs_set;
*swig_use_serial_get = *FTDIc::eeprom_use_serial_get;
*swig_use_serial_set = *FTDIc::eeprom_use_serial_set;
*swig_usb_version_get = *FTDIc::eeprom_usb_version_get;
*swig_usb_version_set = *FTDIc::eeprom_usb_version_set;
*swig_use_usb_version_get = *FTDIc::eeprom_use_usb_version_get;
*swig_use_usb_version_set = *FTDIc::eeprom_use_usb_version_set;
*swig_max_power_get = *FTDIc::eeprom_max_power_get;
*swig_max_power_set = *FTDIc::eeprom_max_power_set;
*swig_manufacturer_get = *FTDIc::eeprom_manufacturer_get;
*swig_manufacturer_set = *FTDIc::eeprom_manufacturer_set;
*swig_product_get = *FTDIc::eeprom_product_get;
*swig_product_set = *FTDIc::eeprom_product_set;
*swig_serial_get = *FTDIc::eeprom_serial_get;
*swig_serial_set = *FTDIc::eeprom_serial_set;
*swig_channel_a_type_get = *FTDIc::eeprom_channel_a_type_get;
*swig_channel_a_type_set = *FTDIc::eeprom_channel_a_type_set;
*swig_channel_b_type_get = *FTDIc::eeprom_channel_b_type_get;
*swig_channel_b_type_set = *FTDIc::eeprom_channel_b_type_set;
*swig_channel_a_driver_get = *FTDIc::eeprom_channel_a_driver_get;
*swig_channel_a_driver_set = *FTDIc::eeprom_channel_a_driver_set;
*swig_channel_b_driver_get = *FTDIc::eeprom_channel_b_driver_get;
*swig_channel_b_driver_set = *FTDIc::eeprom_channel_b_driver_set;
*swig_cbus_function_get = *FTDIc::eeprom_cbus_function_get;
*swig_cbus_function_set = *FTDIc::eeprom_cbus_function_set;
*swig_high_current_get = *FTDIc::eeprom_high_current_get;
*swig_high_current_set = *FTDIc::eeprom_high_current_set;
*swig_high_current_a_get = *FTDIc::eeprom_high_current_a_get;
*swig_high_current_a_set = *FTDIc::eeprom_high_current_a_set;
*swig_high_current_b_get = *FTDIc::eeprom_high_current_b_get;
*swig_high_current_b_set = *FTDIc::eeprom_high_current_b_set;
*swig_invert_get = *FTDIc::eeprom_invert_get;
*swig_invert_set = *FTDIc::eeprom_invert_set;
*swig_group0_drive_get = *FTDIc::eeprom_group0_drive_get;
*swig_group0_drive_set = *FTDIc::eeprom_group0_drive_set;
*swig_group0_schmitt_get = *FTDIc::eeprom_group0_schmitt_get;
*swig_group0_schmitt_set = *FTDIc::eeprom_group0_schmitt_set;
*swig_group0_slew_get = *FTDIc::eeprom_group0_slew_get;
*swig_group0_slew_set = *FTDIc::eeprom_group0_slew_set;
*swig_group1_drive_get = *FTDIc::eeprom_group1_drive_get;
*swig_group1_drive_set = *FTDIc::eeprom_group1_drive_set;
*swig_group1_schmitt_get = *FTDIc::eeprom_group1_schmitt_get;
*swig_group1_schmitt_set = *FTDIc::eeprom_group1_schmitt_set;
*swig_group1_slew_get = *FTDIc::eeprom_group1_slew_get;
*swig_group1_slew_set = *FTDIc::eeprom_group1_slew_set;
*swig_group2_drive_get = *FTDIc::eeprom_group2_drive_get;
*swig_group2_drive_set = *FTDIc::eeprom_group2_drive_set;
*swig_group2_schmitt_get = *FTDIc::eeprom_group2_schmitt_get;
*swig_group2_schmitt_set = *FTDIc::eeprom_group2_schmitt_set;
*swig_group2_slew_get = *FTDIc::eeprom_group2_slew_get;
*swig_group2_slew_set = *FTDIc::eeprom_group2_slew_set;
*swig_group3_drive_get = *FTDIc::eeprom_group3_drive_get;
*swig_group3_drive_set = *FTDIc::eeprom_group3_drive_set;
*swig_group3_schmitt_get = *FTDIc::eeprom_group3_schmitt_get;
*swig_group3_schmitt_set = *FTDIc::eeprom_group3_schmitt_set;
*swig_group3_slew_get = *FTDIc::eeprom_group3_slew_get;
*swig_group3_slew_set = *FTDIc::eeprom_group3_slew_set;
*swig_powersave_get = *FTDIc::eeprom_powersave_get;
*swig_powersave_set = *FTDIc::eeprom_powersave_set;
*swig_clock_polarity_get = *FTDIc::eeprom_clock_polarity_get;
*swig_clock_polarity_set = *FTDIc::eeprom_clock_polarity_set;
*swig_data_order_get = *FTDIc::eeprom_data_order_get;
*swig_data_order_set = *FTDIc::eeprom_data_order_set;
*swig_flow_control_get = *FTDIc::eeprom_flow_control_get;
*swig_flow_control_set = *FTDIc::eeprom_flow_control_set;
*swig_size_get = *FTDIc::eeprom_size_get;
*swig_size_set = *FTDIc::eeprom_size_set;
*swig_chip_get = *FTDIc::eeprom_chip_get;
*swig_chip_set = *FTDIc::eeprom_chip_set;
*swig_buf_get = *FTDIc::eeprom_buf_get;
*swig_buf_set = *FTDIc::eeprom_buf_set;
sub new {
    my $pkg = shift;
    my $self = FTDIc::new_eeprom(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        FTDIc::delete_eeprom($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package FTDI;

*TYPE_AM = *FTDIc::TYPE_AM;
*TYPE_BM = *FTDIc::TYPE_BM;
*TYPE_2232C = *FTDIc::TYPE_2232C;
*TYPE_R = *FTDIc::TYPE_R;
*TYPE_2232H = *FTDIc::TYPE_2232H;
*TYPE_4232H = *FTDIc::TYPE_4232H;
*TYPE_232H = *FTDIc::TYPE_232H;
*TYPE_230X = *FTDIc::TYPE_230X;
*NONE = *FTDIc::NONE;
*ODD = *FTDIc::ODD;
*EVEN = *FTDIc::EVEN;
*MARK = *FTDIc::MARK;
*SPACE = *FTDIc::SPACE;
*STOP_BIT_1 = *FTDIc::STOP_BIT_1;
*STOP_BIT_15 = *FTDIc::STOP_BIT_15;
*STOP_BIT_2 = *FTDIc::STOP_BIT_2;
*BITS_7 = *FTDIc::BITS_7;
*BITS_8 = *FTDIc::BITS_8;
*BREAK_OFF = *FTDIc::BREAK_OFF;
*BREAK_ON = *FTDIc::BREAK_ON;
*BITMODE_RESET = *FTDIc::BITMODE_RESET;
*BITMODE_BITBANG = *FTDIc::BITMODE_BITBANG;
*BITMODE_MPSSE = *FTDIc::BITMODE_MPSSE;
*BITMODE_SYNCBB = *FTDIc::BITMODE_SYNCBB;
*BITMODE_MCU = *FTDIc::BITMODE_MCU;
*BITMODE_OPTO = *FTDIc::BITMODE_OPTO;
*BITMODE_CBUS = *FTDIc::BITMODE_CBUS;
*BITMODE_SYNCFF = *FTDIc::BITMODE_SYNCFF;
*BITMODE_FT1284 = *FTDIc::BITMODE_FT1284;
*INTERFACE_ANY = *FTDIc::INTERFACE_ANY;
*INTERFACE_A = *FTDIc::INTERFACE_A;
*INTERFACE_B = *FTDIc::INTERFACE_B;
*INTERFACE_C = *FTDIc::INTERFACE_C;
*INTERFACE_D = *FTDIc::INTERFACE_D;
*AUTO_DETACH_SIO_MODULE = *FTDIc::AUTO_DETACH_SIO_MODULE;
*DONT_DETACH_SIO_MODULE = *FTDIc::DONT_DETACH_SIO_MODULE;
*MPSSE_WRITE_NEG = *FTDIc::MPSSE_WRITE_NEG;
*MPSSE_BITMODE = *FTDIc::MPSSE_BITMODE;
*MPSSE_READ_NEG = *FTDIc::MPSSE_READ_NEG;
*MPSSE_LSB = *FTDIc::MPSSE_LSB;
*MPSSE_DO_WRITE = *FTDIc::MPSSE_DO_WRITE;
*MPSSE_DO_READ = *FTDIc::MPSSE_DO_READ;
*MPSSE_WRITE_TMS = *FTDIc::MPSSE_WRITE_TMS;
*SET_BITS_LOW = *FTDIc::SET_BITS_LOW;
*SET_BITS_HIGH = *FTDIc::SET_BITS_HIGH;
*GET_BITS_LOW = *FTDIc::GET_BITS_LOW;
*GET_BITS_HIGH = *FTDIc::GET_BITS_HIGH;
*LOOPBACK_START = *FTDIc::LOOPBACK_START;
*LOOPBACK_END = *FTDIc::LOOPBACK_END;
*TCK_DIVISOR = *FTDIc::TCK_DIVISOR;
*DIS_DIV_5 = *FTDIc::DIS_DIV_5;
*EN_DIV_5 = *FTDIc::EN_DIV_5;
*EN_3_PHASE = *FTDIc::EN_3_PHASE;
*DIS_3_PHASE = *FTDIc::DIS_3_PHASE;
*CLK_BITS = *FTDIc::CLK_BITS;
*CLK_BYTES = *FTDIc::CLK_BYTES;
*CLK_WAIT_HIGH = *FTDIc::CLK_WAIT_HIGH;
*CLK_WAIT_LOW = *FTDIc::CLK_WAIT_LOW;
*EN_ADAPTIVE = *FTDIc::EN_ADAPTIVE;
*DIS_ADAPTIVE = *FTDIc::DIS_ADAPTIVE;
*CLK_BYTES_OR_HIGH = *FTDIc::CLK_BYTES_OR_HIGH;
*CLK_BYTES_OR_LOW = *FTDIc::CLK_BYTES_OR_LOW;
*DRIVE_OPEN_COLLECTOR = *FTDIc::DRIVE_OPEN_COLLECTOR;
*SEND_IMMEDIATE = *FTDIc::SEND_IMMEDIATE;
*WAIT_ON_HIGH = *FTDIc::WAIT_ON_HIGH;
*WAIT_ON_LOW = *FTDIc::WAIT_ON_LOW;
*READ_SHORT = *FTDIc::READ_SHORT;
*READ_EXTENDED = *FTDIc::READ_EXTENDED;
*WRITE_SHORT = *FTDIc::WRITE_SHORT;
*WRITE_EXTENDED = *FTDIc::WRITE_EXTENDED;
*SIO_RESET = *FTDIc::SIO_RESET;
*SIO_MODEM_CTRL = *FTDIc::SIO_MODEM_CTRL;
*SIO_SET_FLOW_CTRL = *FTDIc::SIO_SET_FLOW_CTRL;
*SIO_SET_BAUD_RATE = *FTDIc::SIO_SET_BAUD_RATE;
*SIO_SET_DATA = *FTDIc::SIO_SET_DATA;
*SIO_RESET_REQUEST = *FTDIc::SIO_RESET_REQUEST;
*SIO_SET_BAUDRATE_REQUEST = *FTDIc::SIO_SET_BAUDRATE_REQUEST;
*SIO_SET_DATA_REQUEST = *FTDIc::SIO_SET_DATA_REQUEST;
*SIO_SET_FLOW_CTRL_REQUEST = *FTDIc::SIO_SET_FLOW_CTRL_REQUEST;
*SIO_SET_MODEM_CTRL_REQUEST = *FTDIc::SIO_SET_MODEM_CTRL_REQUEST;
*SIO_POLL_MODEM_STATUS_REQUEST = *FTDIc::SIO_POLL_MODEM_STATUS_REQUEST;
*SIO_SET_EVENT_CHAR_REQUEST = *FTDIc::SIO_SET_EVENT_CHAR_REQUEST;
*SIO_SET_ERROR_CHAR_REQUEST = *FTDIc::SIO_SET_ERROR_CHAR_REQUEST;
*SIO_SET_LATENCY_TIMER_REQUEST = *FTDIc::SIO_SET_LATENCY_TIMER_REQUEST;
*SIO_GET_LATENCY_TIMER_REQUEST = *FTDIc::SIO_GET_LATENCY_TIMER_REQUEST;
*SIO_SET_BITMODE_REQUEST = *FTDIc::SIO_SET_BITMODE_REQUEST;
*SIO_READ_PINS_REQUEST = *FTDIc::SIO_READ_PINS_REQUEST;
*SIO_READ_EEPROM_REQUEST = *FTDIc::SIO_READ_EEPROM_REQUEST;
*SIO_WRITE_EEPROM_REQUEST = *FTDIc::SIO_WRITE_EEPROM_REQUEST;
*SIO_ERASE_EEPROM_REQUEST = *FTDIc::SIO_ERASE_EEPROM_REQUEST;
*SIO_RESET_SIO = *FTDIc::SIO_RESET_SIO;
*SIO_RESET_PURGE_RX = *FTDIc::SIO_RESET_PURGE_RX;
*SIO_RESET_PURGE_TX = *FTDIc::SIO_RESET_PURGE_TX;
*SIO_DISABLE_FLOW_CTRL = *FTDIc::SIO_DISABLE_FLOW_CTRL;
*SIO_RTS_CTS_HS = *FTDIc::SIO_RTS_CTS_HS;
*SIO_DTR_DSR_HS = *FTDIc::SIO_DTR_DSR_HS;
*SIO_XON_XOFF_HS = *FTDIc::SIO_XON_XOFF_HS;
*SIO_SET_DTR_MASK = *FTDIc::SIO_SET_DTR_MASK;
*SIO_SET_DTR_HIGH = *FTDIc::SIO_SET_DTR_HIGH;
*SIO_SET_DTR_LOW = *FTDIc::SIO_SET_DTR_LOW;
*SIO_SET_RTS_MASK = *FTDIc::SIO_SET_RTS_MASK;
*SIO_SET_RTS_HIGH = *FTDIc::SIO_SET_RTS_HIGH;
*SIO_SET_RTS_LOW = *FTDIc::SIO_SET_RTS_LOW;
*VENDOR_ID = *FTDIc::VENDOR_ID;
*PRODUCT_ID = *FTDIc::PRODUCT_ID;
*SELF_POWERED = *FTDIc::SELF_POWERED;
*REMOTE_WAKEUP = *FTDIc::REMOTE_WAKEUP;
*IS_NOT_PNP = *FTDIc::IS_NOT_PNP;
*SUSPEND_DBUS7 = *FTDIc::SUSPEND_DBUS7;
*IN_IS_ISOCHRONOUS = *FTDIc::IN_IS_ISOCHRONOUS;
*OUT_IS_ISOCHRONOUS = *FTDIc::OUT_IS_ISOCHRONOUS;
*SUSPEND_PULL_DOWNS = *FTDIc::SUSPEND_PULL_DOWNS;
*USE_SERIAL = *FTDIc::USE_SERIAL;
*USB_VERSION = *FTDIc::USB_VERSION;
*USE_USB_VERSION = *FTDIc::USE_USB_VERSION;
*MAX_POWER = *FTDIc::MAX_POWER;
*CHANNEL_A_TYPE = *FTDIc::CHANNEL_A_TYPE;
*CHANNEL_B_TYPE = *FTDIc::CHANNEL_B_TYPE;
*CHANNEL_A_DRIVER = *FTDIc::CHANNEL_A_DRIVER;
*CHANNEL_B_DRIVER = *FTDIc::CHANNEL_B_DRIVER;
*CBUS_FUNCTION_0 = *FTDIc::CBUS_FUNCTION_0;
*CBUS_FUNCTION_1 = *FTDIc::CBUS_FUNCTION_1;
*CBUS_FUNCTION_2 = *FTDIc::CBUS_FUNCTION_2;
*CBUS_FUNCTION_3 = *FTDIc::CBUS_FUNCTION_3;
*CBUS_FUNCTION_4 = *FTDIc::CBUS_FUNCTION_4;
*CBUS_FUNCTION_5 = *FTDIc::CBUS_FUNCTION_5;
*CBUS_FUNCTION_6 = *FTDIc::CBUS_FUNCTION_6;
*CBUS_FUNCTION_7 = *FTDIc::CBUS_FUNCTION_7;
*CBUS_FUNCTION_8 = *FTDIc::CBUS_FUNCTION_8;
*CBUS_FUNCTION_9 = *FTDIc::CBUS_FUNCTION_9;
*HIGH_CURRENT = *FTDIc::HIGH_CURRENT;
*HIGH_CURRENT_A = *FTDIc::HIGH_CURRENT_A;
*HIGH_CURRENT_B = *FTDIc::HIGH_CURRENT_B;
*INVERT = *FTDIc::INVERT;
*GROUP0_DRIVE = *FTDIc::GROUP0_DRIVE;
*GROUP0_SCHMITT = *FTDIc::GROUP0_SCHMITT;
*GROUP0_SLEW = *FTDIc::GROUP0_SLEW;
*GROUP1_DRIVE = *FTDIc::GROUP1_DRIVE;
*GROUP1_SCHMITT = *FTDIc::GROUP1_SCHMITT;
*GROUP1_SLEW = *FTDIc::GROUP1_SLEW;
*GROUP2_DRIVE = *FTDIc::GROUP2_DRIVE;
*GROUP2_SCHMITT = *FTDIc::GROUP2_SCHMITT;
*GROUP2_SLEW = *FTDIc::GROUP2_SLEW;
*GROUP3_DRIVE = *FTDIc::GROUP3_DRIVE;
*GROUP3_SCHMITT = *FTDIc::GROUP3_SCHMITT;
*GROUP3_SLEW = *FTDIc::GROUP3_SLEW;
*CHIP_SIZE = *FTDIc::CHIP_SIZE;
*CHIP_TYPE = *FTDIc::CHIP_TYPE;
*POWER_SAVE = *FTDIc::POWER_SAVE;
*CLOCK_POLARITY = *FTDIc::CLOCK_POLARITY;
*DATA_ORDER = *FTDIc::DATA_ORDER;
*FLOW_CONTROL = *FTDIc::FLOW_CONTROL;
*CHANNEL_C_DRIVER = *FTDIc::CHANNEL_C_DRIVER;
*CHANNEL_D_DRIVER = *FTDIc::CHANNEL_D_DRIVER;
*CHANNEL_A_RS485 = *FTDIc::CHANNEL_A_RS485;
*CHANNEL_B_RS485 = *FTDIc::CHANNEL_B_RS485;
*CHANNEL_C_RS485 = *FTDIc::CHANNEL_C_RS485;
*CHANNEL_D_RS485 = *FTDIc::CHANNEL_D_RS485;
*RELEASE_NUMBER = *FTDIc::RELEASE_NUMBER;
*EXTERNAL_OSCILLATOR = *FTDIc::EXTERNAL_OSCILLATOR;
*USER_DATA_ADDR = *FTDIc::USER_DATA_ADDR;
*FT1284_CLK_IDLE_STATE = *FTDIc::FT1284_CLK_IDLE_STATE;
*FT1284_DATA_LSB = *FTDIc::FT1284_DATA_LSB;
*FT1284_FLOW_CONTROL = *FTDIc::FT1284_FLOW_CONTROL;
*POWER_SAVE_DISABLE_H = *FTDIc::POWER_SAVE_DISABLE_H;
*USE_SERIAL_NUM = *FTDIc::USE_SERIAL_NUM;
*CBUS_TXDEN = *FTDIc::CBUS_TXDEN;
*CBUS_PWREN = *FTDIc::CBUS_PWREN;
*CBUS_RXLED = *FTDIc::CBUS_RXLED;
*CBUS_TXLED = *FTDIc::CBUS_TXLED;
*CBUS_TXRXLED = *FTDIc::CBUS_TXRXLED;
*CBUS_SLEEP = *FTDIc::CBUS_SLEEP;
*CBUS_CLK48 = *FTDIc::CBUS_CLK48;
*CBUS_CLK24 = *FTDIc::CBUS_CLK24;
*CBUS_CLK12 = *FTDIc::CBUS_CLK12;
*CBUS_CLK6 = *FTDIc::CBUS_CLK6;
*CBUS_IOMODE = *FTDIc::CBUS_IOMODE;
*CBUS_BB_WR = *FTDIc::CBUS_BB_WR;
*CBUS_BB_RD = *FTDIc::CBUS_BB_RD;
*CBUSH_TRISTATE = *FTDIc::CBUSH_TRISTATE;
*CBUSH_TXLED = *FTDIc::CBUSH_TXLED;
*CBUSH_RXLED = *FTDIc::CBUSH_RXLED;
*CBUSH_TXRXLED = *FTDIc::CBUSH_TXRXLED;
*CBUSH_PWREN = *FTDIc::CBUSH_PWREN;
*CBUSH_SLEEP = *FTDIc::CBUSH_SLEEP;
*CBUSH_DRIVE_0 = *FTDIc::CBUSH_DRIVE_0;
*CBUSH_DRIVE1 = *FTDIc::CBUSH_DRIVE1;
*CBUSH_IOMODE = *FTDIc::CBUSH_IOMODE;
*CBUSH_TXDEN = *FTDIc::CBUSH_TXDEN;
*CBUSH_CLK30 = *FTDIc::CBUSH_CLK30;
*CBUSH_CLK15 = *FTDIc::CBUSH_CLK15;
*CBUSH_CLK7_5 = *FTDIc::CBUSH_CLK7_5;
*CBUSX_TRISTATE = *FTDIc::CBUSX_TRISTATE;
*CBUSX_TXLED = *FTDIc::CBUSX_TXLED;
*CBUSX_RXLED = *FTDIc::CBUSX_RXLED;
*CBUSX_TXRXLED = *FTDIc::CBUSX_TXRXLED;
*CBUSX_PWREN = *FTDIc::CBUSX_PWREN;
*CBUSX_SLEEP = *FTDIc::CBUSX_SLEEP;
*CBUSX_DRIVE_0 = *FTDIc::CBUSX_DRIVE_0;
*CBUSX_DRIVE1 = *FTDIc::CBUSX_DRIVE1;
*CBUSX_IOMODE = *FTDIc::CBUSX_IOMODE;
*CBUSX_TXDEN = *FTDIc::CBUSX_TXDEN;
*CBUSX_CLK24 = *FTDIc::CBUSX_CLK24;
*CBUSX_CLK12 = *FTDIc::CBUSX_CLK12;
*CBUSX_CLK6 = *FTDIc::CBUSX_CLK6;
*CBUSX_BAT_DETECT = *FTDIc::CBUSX_BAT_DETECT;
*CBUSX_BAT_DETECT_NEG = *FTDIc::CBUSX_BAT_DETECT_NEG;
*CBUSX_I2C_TXE = *FTDIc::CBUSX_I2C_TXE;
*CBUSX_I2C_RXF = *FTDIc::CBUSX_I2C_RXF;
*CBUSX_VBUS_SENSE = *FTDIc::CBUSX_VBUS_SENSE;
*CBUSX_BB_WR = *FTDIc::CBUSX_BB_WR;
*CBUSX_BB_RD = *FTDIc::CBUSX_BB_RD;
*CBUSX_TIME_STAMP = *FTDIc::CBUSX_TIME_STAMP;
*CBUSX_AWAKE = *FTDIc::CBUSX_AWAKE;
*INVERT_TXD = *FTDIc::INVERT_TXD;
*INVERT_RXD = *FTDIc::INVERT_RXD;
*INVERT_RTS = *FTDIc::INVERT_RTS;
*INVERT_CTS = *FTDIc::INVERT_CTS;
*INVERT_DTR = *FTDIc::INVERT_DTR;
*INVERT_DSR = *FTDIc::INVERT_DSR;
*INVERT_DCD = *FTDIc::INVERT_DCD;
*INVERT_RI = *FTDIc::INVERT_RI;
*CHANNEL_IS_UART = *FTDIc::CHANNEL_IS_UART;
*CHANNEL_IS_FIFO = *FTDIc::CHANNEL_IS_FIFO;
*CHANNEL_IS_OPTO = *FTDIc::CHANNEL_IS_OPTO;
*CHANNEL_IS_CPU = *FTDIc::CHANNEL_IS_CPU;
*CHANNEL_IS_FT1284 = *FTDIc::CHANNEL_IS_FT1284;
*CHANNEL_IS_RS485 = *FTDIc::CHANNEL_IS_RS485;
*DRIVE_4MA = *FTDIc::DRIVE_4MA;
*DRIVE_8MA = *FTDIc::DRIVE_8MA;
*DRIVE_12MA = *FTDIc::DRIVE_12MA;
*DRIVE_16MA = *FTDIc::DRIVE_16MA;
*SLOW_SLEW = *FTDIc::SLOW_SLEW;
*IS_SCHMITT = *FTDIc::IS_SCHMITT;
*DRIVER_VCP = *FTDIc::DRIVER_VCP;
*DRIVER_VCPH = *FTDIc::DRIVER_VCPH;
*USE_USB_VERSION_BIT = *FTDIc::USE_USB_VERSION_BIT;
*SUSPEND_DBUS7_BIT = *FTDIc::SUSPEND_DBUS7_BIT;
*HIGH_CURRENT_DRIVE = *FTDIc::HIGH_CURRENT_DRIVE;
*HIGH_CURRENT_DRIVE_R = *FTDIc::HIGH_CURRENT_DRIVE_R;
*FTDI_MAX_EEPROM_SIZE = *FTDIc::FTDI_MAX_EEPROM_SIZE;
1;
